#!/usr/bin/env bash
# Start a VM

vm_name="$@"

function die () {
	local msg="$1"
	echo "ERROR: ${msg}" >&2
	exit 1
}

function start_vm () {
	local vm_name="$1"

	echo "Starting \"${vm_name}\""
	VBoxManage startvm "$vm_name" --type headless
	if [ "$?" -ne 0 ] ; then
		echo
		echo
		die "Could not start the vm, exiting..."
	fi
}

[ -z "$vm_name" ] && die "Must specify vm on command line."

# find state of vm
vm_state="$(VBoxManage showvminfo "$vm_name" | grep "^State:" | sed -e 's/State:\s\+\([A-Za-z ]\+\).*$/\1/ ; s/\s\+$//')"

# start vm if it is not already running
case "$vm_state" in
	powered\ off|saved)
		start_vm "${vm_name}"
		;;
	running)
		# do nothing
		:
		;;
	*)
		die "When looking at \"${vm_name}\", found unknown state: ${vm_state}"
		;;
esac

echo -n "Trying to connect..."
while ((1)) ; do
	ssh -o "ConnectTimeout 1" "$vm_name" ls 1>/dev/null 2>&1
	if [ "$?" -eq 0 ] ; then
		echo
		break
	else
		echo -n "."
	fi
done

ssh "$vm_name"

savestate=""

# loop around, trying to read in whether or not to save the state
while [ "$savestate" != "n" -a "$savestate" != "y" ] ; do

	# read in the variable
	read -p "Save state? [Y/n]: " savestate

	# if it is blank, then fill it in
	if [ -z "$savestate" ] ; then
		savestate="y"
	fi

	# lowercase it
	savestate="$(echo $savestate | tr '[:upper:]' '[:lower:]')"

	if [ "$savestate" != "n" -a "$savestate" != "y" ] ; then
		echo "ERROR! You must enter either \"Y\" or \"N\"."
	fi
done

if [ "$savestate" = "y" ] ; then
	VBoxManage controlvm "$vm_name" savestate
fi

